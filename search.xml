<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据处理与特征工程-特征提取</title>
      <link href="2021/06/09/%E8%BF%9B%E5%85%A5%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/06/09/%E8%BF%9B%E5%85%A5%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>console.error("Error: [hexo-tag-aplayer] Meting support is disabled, cannot resolve the meting tags properly.");</script><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><h2 id="可用数据集"><a href="#可用数据集" class="headerlink" title="可用数据集"></a>可用数据集</h2><ul><li>公司内部、百度</li><li>数据接口（￥）</li><li>各种数据集</li><li>学习阶段可用的数据集<ul><li><a href="https://scikit-learn.org/stable/#">sklean</a></li><li><a href="https://www.kaggle.com/">kaggle</a></li><li><a href="http://archive.ics.uci.edu/ml/datasets.php">UCI</a><h2 id="sklearn-数据集"><a href="#sklearn-数据集" class="headerlink" title="sklearn 数据集"></a>sklearn 数据集</h2></li></ul></li></ul><ol><li>导入数据集和工具库  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#导入sklearn数据包</span><br><span class="line">from sklearn.datasets import load_iris #导入鸢尾花数据集</span><br><span class="line">from sklearn.model_selection import train_test_split #导入模型划分</span><br></pre></td></tr></table></figure></li><li>数据查看 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#字典格式</span><br><span class="line">total&#x3D;load_iris()</span><br><span class="line">#print(total)</span><br><span class="line">#数据目标值</span><br><span class="line">print(total.target_names)</span><br><span class="line">print(total.target)</span><br><span class="line">#数据内容（数据特征值）</span><br><span class="line">print(total.feature_names)</span><br><span class="line">print(total.data)</span><br><span class="line">#数据描述</span><br><span class="line">print(total.DESCR)</span><br></pre></td></tr></table></figure></li><li>对数据集进行划分 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#返回值 训练集 和 测试集</span><br><span class="line">x_train,x_test,y_train,y_test&#x3D;train_test_split(total.data,total.target,test_size&#x3D;0.24,random_state&#x3D;25)</span><br><span class="line">print(&quot;训练集特征值及目标值：\n&quot;,x_train,&quot;\n&quot;,y_train)</span><br><span class="line">print(&quot;测试集特征值及目标值：\n&quot;,x_test,x_train)</span><br></pre></td></tr></table></figure><h1 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h1><a href="https://imgtu.com/i/4nqt8P"><img src="https://z3.ax1x.com/2021/09/16/4nqt8P.md.png" alt="4nqt8P.md.png"></a></li></ol><h2 id="为什么需要特征工程"><a href="#为什么需要特征工程" class="headerlink" title="为什么需要特征工程"></a>为什么需要特征工程</h2><blockquote><p>数据和特征决定了机器学习的上限，而模型和算法知识逼近这个上限而已</p></blockquote><h2 id="什么是特征工程"><a href="#什么是特征工程" class="headerlink" title="什么是特征工程"></a>什么是特征工程</h2><blockquote><p>pandas ——&gt; 数据清洗、数据处理<br>sklearn  ——&gt; 特征工程</p></blockquote><h2 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>将任意数据（如文本或图像）转化为可用于机器学习的数字特征</p><blockquote><p>注：特征值化是为了计算机更好的理解数据<br>sklearn.feature_extraction（特征提取API）</p></blockquote><ul><li>特征提取的分类<ul><li>字典特征提取（特征离散化）</li><li>文本特征提取</li><li>图像特征提取（深度学习）</li></ul></li></ul><h3 id="字典特征提取"><a href="#字典特征提取" class="headerlink" title="字典特征提取"></a>字典特征提取</h3><blockquote><p>字典特征提取 ——&gt; 类型 ——&gt; one-hot编码</p></blockquote><ol><li>导入sklearn数据包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.datasets import load_iris #导入鸢尾花数据集</span><br><span class="line">from sklearn.model_selection import train_test_split #导入模型划分</span><br><span class="line">from sklearn.feature_extraction import DictVectorizer #导入字典特征转换器</span><br></pre></td></tr></table></figure></li><li>利用转化器进行特征提取<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data&#x3D;[&#123;&#39;city&#39;:&#39;北京&#39;,&#39;temperature&#39;:100&#125;,</span><br><span class="line">     &#123;&#39;city&#39;:&#39;上海&#39;,&#39;temperature&#39;:60&#125;,</span><br><span class="line">     &#123;&#39;city&#39;:&#39;深圳&#39;,&#39;temperature&#39;:30&#125;]</span><br><span class="line">#1.实例化一个转化器类</span><br><span class="line">transfer&#x3D;DictVectorizer(sparse&#x3D;False)#sparse&#x3D;Ture 返回sparse矩阵（稀疏矩阵将非零值按位置返回）---&gt;可以提高效率</span><br><span class="line">#2.调用fit_transform()</span><br><span class="line">data_new&#x3D;transfer.fit_transform(data)</span><br><span class="line">print(transfer.get_feature_names())</span><br><span class="line">print(data_new)</span><br></pre></td></tr></table></figure><a href="https://imgtu.com/i/2yh0Nn"><img src="https://z3.ax1x.com/2021/06/09/2yh0Nn.png" alt="2yh0Nn.png"></a><h3 id="中文文本特征提取"><a href="#中文文本特征提取" class="headerlink" title="中文文本特征提取"></a>中文文本特征提取</h3></li></ol><h4 id="方法一：CountVectorizer"><a href="#方法一：CountVectorizer" class="headerlink" title="方法一：CountVectorizer"></a>方法一：CountVectorizer</h4><pre><code>统计每个样本特征词出现的个数stop_words停用词停用词表</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.feature_extraction.text import CountVectorizer#导入文本特征转换器</span><br><span class="line"></span><br><span class="line">data&#x3D;[&quot;人生苦短我要学习深度学习，加油奥里给我里宝贝。&quot;,</span><br><span class="line">     &quot;菏泽曹县666窝里宝贝。&quot;,</span><br><span class="line">     &quot;我爱你桑桑。&quot;]</span><br><span class="line">data1&#x3D;&quot;我爱北京天安门&quot;</span><br><span class="line">#使用jieba切割文档（切割参数为字符串）</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">a&#x3D;list(jieba.cut(data1))</span><br><span class="line">b&#x3D;&quot; &quot;.join(list(jieba.cut(data1)))</span><br><span class="line">print(a)</span><br><span class="line">print(type(a))</span><br><span class="line">print(b)</span><br><span class="line">print(type(b))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">#1.将中文文本进行分词</span><br><span class="line">data_new&#x3D;[]</span><br><span class="line">for sent in data:</span><br><span class="line">    #a&#x3D;&quot; &quot;.join(list(jieba.cut(sent)))</span><br><span class="line">    #print(a)</span><br><span class="line">    data_new.append(&quot; &quot;.join(list(jieba.cut(sent))))</span><br><span class="line">print(data_new)</span><br><span class="line"></span><br><span class="line">#2.实现一个转化器类</span><br><span class="line">transfer&#x3D;CountVectorizer(stop_words&#x3D;[&quot;666&quot;,&quot;宝贝啊&quot;])</span><br><span class="line">#3.调用fit_transform</span><br><span class="line">data_fin&#x3D;transfer.fit_transform(data_new)</span><br><span class="line">print(&quot;特征名字：\n&quot;,transfer.get_feature_names())</span><br><span class="line">print(&quot;data_fin：\n&quot;,data_fin.toarray())</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/2yhycT"><img src="https://z3.ax1x.com/2021/06/09/2yhycT.png" alt="2yhycT.png"></a></p><h4 id="方法二：TfidfVectorize"><a href="#方法二：TfidfVectorize" class="headerlink" title="方法二：TfidfVectorize"></a>方法二：TfidfVectorize</h4><pre><code>区别于方法一：更容易找到关键词（在其他文章出现很少，在本文中出现很多的词汇）TF —— 词频（term frequency）IDF —— 由总文件数目除以包括该词语之文件的数目，再到的商取以10为底的对数得到TF-IDF=TF×IDF —— 重要程度</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.feature_extraction.text import TfidfVectorizer</span><br><span class="line"></span><br><span class="line">data&#x3D;[&quot;人生苦短我要学习深度学习，加油奥里给我里宝贝。&quot;,</span><br><span class="line">     &quot;菏泽曹县666窝里宝贝。&quot;,</span><br><span class="line">     &quot;我爱你桑桑。&quot;]</span><br><span class="line"></span><br><span class="line">#1.将文本进行分词</span><br><span class="line">data_new&#x3D;[]</span><br><span class="line">for sent in data:</span><br><span class="line">    data_new.append(&quot; &quot;.join(list(jieba.cut(sent))))</span><br><span class="line">#2.实例化一个转换器对象</span><br><span class="line">transfer&#x3D;TfidfVectorizer()</span><br><span class="line">#3.利用转换器对象进行数据分割</span><br><span class="line">data_fin&#x3D;transfer.fit_transform(data_new)</span><br><span class="line">print(&quot;特征名字：\n&quot;,transfer.get_feature_names())</span><br><span class="line">print(&quot;data_fin：\n&quot;,data_fin.toarray())</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/2yhguF"><img src="https://z3.ax1x.com/2021/06/09/2yhguF.png" alt="2yhguF.png"></a></p><h2 id="特征预处理"><a href="#特征预处理" class="headerlink" title="特征预处理"></a>特征预处理</h2><h3 id="什么是特征预处理"><a href="#什么是特征预处理" class="headerlink" title="什么是特征预处理"></a>什么是特征预处理</h3><h4 id="特征预处理定义"><a href="#特征预处理定义" class="headerlink" title="特征预处理定义"></a>特征预处理定义</h4><blockquote><p>scikit-learn的解释<br>provides several common utility functions and transformer classes to change raw feature vectors into a representation that is more suitable for the downstream estimators.</p></blockquote><p>翻译过来：通过一些转换函数将特征数据转换成更加适合算法模型的特征数据过程<br><a href="https://imgtu.com/i/4nq3Ed"><img src="https://z3.ax1x.com/2021/09/16/4nq3Ed.md.png" alt="4nq3Ed.md.png"></a></p><ul><li>为什么我们要进行归一化/标准化？<ul><li><font color=#f0e68c>特征的单位或者大小相差较大，或者某特征的方差相比其他的特征要大出几个数量级，容易影响（支配）目标结果，使得一些算法无法学习到其它的特征</font></li></ul></li></ul><p>举例：约会对象数据<br><a href="https://imgtu.com/i/4nLjS0"><img src="https://z3.ax1x.com/2021/09/16/4nLjS0.md.png" alt="4nLjS0.md.png"></a></p><p>我们需要用到一些方法进行<font color=#f0e68c>无量纲化</font>，使不同规格的数据转换到同一规格.</p><h4 id="包含内容-数值型数据的无量纲化"><a href="#包含内容-数值型数据的无量纲化" class="headerlink" title="包含内容(数值型数据的无量纲化)"></a>包含内容(数值型数据的无量纲化)</h4><ul><li>归一化</li><li>标准化<h4 id="特征处理API"><a href="#特征处理API" class="headerlink" title="特征处理API"></a>特征处理API</h4><blockquote><p>sklearn.preprocessing</p></blockquote></li></ul><h3 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>通过对原始数据进行变换把数据映射到(默认为[0,1])之间</p><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><p><a href="https://imgtu.com/i/4nXc8I"><img src="https://z3.ax1x.com/2021/09/16/4nXc8I.md.png" alt="4nXc8I.md.png"></a></p><blockquote><p>作用于每一列，max为一列的最大值，min为一列的最小值,那么X’’为最终结果，mx，mi分别为指定区间值默认mx为1,mi为0</p></blockquote><p><a href="https://imgtu.com/i/4nX5Vg"><img src="https://z3.ax1x.com/2021/09/16/4nX5Vg.md.png" alt="4nX5Vg.md.png"></a></p><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><blockquote><p>sklearn.preprocessing.MinMaxScaler (feature_range=(0,1)… )</p></blockquote><ul><li>MinMaxScalar.fit_transform(X)<br>X:numpy array格式的数据[n_samples,n_features]</li><li>返回值：转换后的形状相同的array <h4 id="数据计算"><a href="#数据计算" class="headerlink" title="数据计算"></a>数据计算</h4>我们对以下数据进行运算，保存的就是之前的约会对象数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">40920,8.326976,0.953952,3</span><br><span class="line">14488,7.153469,1.673904,2</span><br><span class="line">26052,1.441871,0.805124,1</span><br><span class="line">75136,13.147394,0.428964,1</span><br><span class="line">38344,1.669788,0.134296,1</span><br></pre></td></tr></table></figure></li><li>分析</li></ul><ol><li>实例化MinMaxScalar</li><li>通过fit_transform转换<figure class="highlight plain"><figcaption><span>pandas as pd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.preprocessing import MinMaxScaler</span><br><span class="line"></span><br><span class="line">def minmax_demo():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    归一化演示</span><br><span class="line">    :return: None</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    data &#x3D; pd.read_csv(&quot;.&#x2F;data&#x2F;dating.txt&quot;)</span><br><span class="line">    print(data)</span><br><span class="line">    # 1、实例化一个转换器类</span><br><span class="line">    transfer &#x3D; MinMaxScaler(feature_range&#x3D;(2, 3)) # 2-3之间</span><br><span class="line">    # 2、调用fit_transform</span><br><span class="line">    data &#x3D; transfer.fit_transform(data[[&#39;milage&#39;,&#39;Liters&#39;,&#39;Consumtime&#39;]])</span><br><span class="line">    print(&quot;最小值最大值归一化处理的结果：\n&quot;, data)</span><br><span class="line"></span><br><span class="line">    return None</span><br></pre></td></tr></table></figure></li><li>返回结果<figure class="highlight plain"><figcaption><span>Liters  Consumtime  target</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">0     40920   8.326976    0.953952       3</span><br><span class="line">1     14488   7.153469    1.673904       2</span><br><span class="line">2     26052   1.441871    0.805124       1</span><br><span class="line">3     75136  13.147394    0.428964       1</span><br><span class="line">..      ...        ...         ...     ...</span><br><span class="line">998   48111   9.134528    0.728045       3</span><br><span class="line">999   43757   7.882601    1.332446       3</span><br><span class="line"></span><br><span class="line">[1000 rows x 4 columns]</span><br><span class="line">最小值最大值归一化处理的结果：</span><br><span class="line"> [[ 2.44832535  2.39805139  2.56233353]</span><br><span class="line"> [ 2.15873259  2.34195467  2.98724416]</span><br><span class="line"> [ 2.28542943  2.06892523  2.47449629]</span><br><span class="line"> ..., </span><br><span class="line"> [ 2.29115949  2.50910294  2.51079493]</span><br><span class="line"> [ 2.52711097  2.43665451  2.4290048 ]</span><br><span class="line"> [ 2.47940793  2.3768091   2.78571804]]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="归一化总结"><a href="#归一化总结" class="headerlink" title="归一化总结"></a>归一化总结</h4>因为最大值最小值是变化的，另外，最大值与最小值非常容易受异常点影响，所以这种方法鲁棒性较差（健壮性），只适合传统精确小数据场景。怎么办？</li></ol><h3 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>通过对原始数据进行变换把数据变换到均值为0,标准差为1范围内</p><h4 id="公式-1"><a href="#公式-1" class="headerlink" title="公式"></a>公式</h4><p><a href="https://imgtu.com/i/4JE6tU"><img src="https://z3.ax1x.com/2021/09/20/4JE6tU.png" alt="4JE6tU.png"></a></p><blockquote><p>作用于每一列，mean为平均值，σ为标准差</p></blockquote><p>所以回到刚才异常点的地方，我们再来看看标准化<br><a href="https://imgtu.com/i/4JEHhD"><img src="https://z3.ax1x.com/2021/09/20/4JEHhD.md.png" alt="4JEHhD.md.png"></a></p><ul><li>对于归一化来说：如果出现异常点，影响了最大值和最小值，那么结果显然会发生改变</li><li>对于标准化来说：如果出现异常点，由于具有一定数据量，少量的异常点对于平均值的影响并不大，从而方差改变较小。</li></ul><h4 id="API-1"><a href="#API-1" class="headerlink" title="API"></a>API</h4><ul><li><font color= red size=4>sklearn.preprocessing.StandardScaler( ) </font><ul><li>处理之后每列来说所有数据都聚集在均值0附近标准差差为1</li><li>StandardScaler.fit_transform(X)<ul><li>X:numpy array格式的数据[n_samples,n_features]</li></ul></li><li>返回值：转换后的形状相同的array</li></ul></li></ul><h4 id="数据计算-1"><a href="#数据计算-1" class="headerlink" title="数据计算"></a>数据计算</h4><p>同样对上面的数据进行处理</p><ul><li>分析<ol><li>实例化StandardScaler</li><li>通过fit_transform转换<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from sklearn.preprocessing import StandardScaler</span><br><span class="line"></span><br><span class="line">def stand_demo():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    标准化演示</span><br><span class="line">    :return: None</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    data &#x3D; pd.read_csv(&quot;dating.txt&quot;)</span><br><span class="line">    print(data)</span><br><span class="line">    # 1、实例化一个转换器类</span><br><span class="line">    transfer &#x3D; StandardScaler()</span><br><span class="line">    # 2、调用fit_transform</span><br><span class="line">    data &#x3D; transfer.fit_transform(data[[&#39;milage&#39;,&#39;Liters&#39;,&#39;Consumtime&#39;]])</span><br><span class="line">    print(&quot;标准化的结果:\n&quot;, data)</span><br><span class="line">    print(&quot;每一列特征的平均值：\n&quot;, transfer.mean_)</span><br><span class="line">    print(&quot;每一列特征的方差：\n&quot;, transfer.var_)</span><br><span class="line"></span><br><span class="line">    return None</span><br><span class="line"></span><br></pre></td></tr></table></figure>返回结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">     milage     Liters  Consumtime  target</span><br><span class="line">0     40920   8.326976    0.953952       3</span><br><span class="line">1     14488   7.153469    1.673904       2</span><br><span class="line">2     26052   1.441871    0.805124       1</span><br><span class="line">..      ...        ...         ...     ...</span><br><span class="line">997   26575  10.650102    0.866627       3</span><br><span class="line">998   48111   9.134528    0.728045       3</span><br><span class="line">999   43757   7.882601    1.332446       3</span><br><span class="line"></span><br><span class="line">[1000 rows x 4 columns]</span><br><span class="line">标准化的结果:</span><br><span class="line"> [[ 0.33193158  0.41660188  0.24523407]</span><br><span class="line"> [-0.87247784  0.13992897  1.69385734]</span><br><span class="line"> [-0.34554872 -1.20667094 -0.05422437]</span><br><span class="line"> ..., </span><br><span class="line"> [-0.32171752  0.96431572  0.06952649]</span><br><span class="line"> [ 0.65959911  0.60699509 -0.20931587]</span><br><span class="line"> [ 0.46120328  0.31183342  1.00680598]]</span><br><span class="line">每一列特征的平均值：</span><br><span class="line"> [  3.36354210e+04   6.55996083e+00   8.32072997e-01]</span><br><span class="line">每一列特征的方差：</span><br><span class="line"> [  4.81628039e+08   1.79902874e+01   2.46999554e-01]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="标准化总结"><a href="#标准化总结" class="headerlink" title="标准化总结"></a>标准化总结</h4>在已有样本足够多的情况下比较稳定，适合现代嘈杂大数据场景。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据处理与特征工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解机器学习</title>
      <link href="2021/06/08/%E4%BA%86%E8%A7%A3%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/06/08/%E4%BA%86%E8%A7%A3%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="人工智能概述"><a href="#人工智能概述" class="headerlink" title="人工智能概述"></a>人工智能概述</h1><h2 id="人工智能概述-1"><a href="#人工智能概述-1" class="headerlink" title="人工智能概述"></a>人工智能概述</h2><ul><li>达特茅斯会议-人工智能的起点</li><li>机器学习是人工智能的一个实现途径</li><li>深度学习是机器学习的一个方法发展而来<h2 id="机器学习、深度学习能做些什么"><a href="#机器学习、深度学习能做些什么" class="headerlink" title="机器学习、深度学习能做些什么"></a>机器学习、深度学习能做些什么</h2></li><li>传统预测</li><li>图像识别</li><li>自然语言处理</li></ul><h1 id="什么是机器学习"><a href="#什么是机器学习" class="headerlink" title="什么是机器学习"></a>什么是机器学习</h1><h2 id="机器学习定义"><a href="#机器学习定义" class="headerlink" title="机器学习定义"></a>机器学习定义</h2><p><em>机器学习是从数据中自动分析获得模型，并利用模型对未知数据进行预测</em></p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p><strong>类似于人</strong><br><img src="https://z3.ax1x.com/2021/06/08/2sF9Ts.png"></p><h1 id="机器学习数据集"><a href="#机器学习数据集" class="headerlink" title="机器学习数据集"></a>机器学习数据集</h1><p><strong>结构：特征值+目标值</strong></p><p><img src="https://z3.ax1x.com/2021/06/08/2sAgFs.png" alt="2sAgFs.png"></p><h1 id="机器学习算法分类"><a href="#机器学习算法分类" class="headerlink" title="机器学习算法分类"></a>机器学习算法分类</h1><h2 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h2><ul><li><p>目标值：类别 —— 分类问题  </p><blockquote><p>具体算法：k-近邻算法、贝叶斯分类、决策树与随机森林、逻辑回归</p></blockquote></li></ul><ul><li><p>目标值：连续性数据 —— 回归问题</p><blockquote><p>具体算法：线性回归、岭回归</p></blockquote></li></ul><h2 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h2><ul><li><p>目标值：无</p><blockquote><p>具体算法：k-means</p></blockquote></li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><pre><code>  1.预测明天的气温是多少度？  回归  2.预测明天是阴、晴还是雨？  分类  3.人脸年龄预测？  分类（老小）/回归（具体年龄）  4.人脸识别？  分类</code></pre><h1 id="机器学习开发流程"><a href="#机器学习开发流程" class="headerlink" title="机器学习开发流程"></a>机器学习开发流程</h1><ol><li>获取数据</li><li>数据处理</li><li>特征工程</li><li>建立模型（算法训练）</li><li>模型评估</li><li>应用<br><img src="https://z3.ax1x.com/2021/06/08/2sZCRI.png" alt="2sZCRI.png"><br><img src="https://z3.ax1x.com/2021/06/08/2sZDOK.png" alt="2sZDOK.png"></li></ol><h1 id="学习框架和资料介绍"><a href="#学习框架和资料介绍" class="headerlink" title="学习框架和资料介绍"></a>学习框架和资料介绍</h1><ol><li><p>算法是核心、数据与计算是基础</p></li><li><p>找准定位</p><blockquote><p>大部分复杂模型的算法设计都是算法工程师在做，而我们做的是：</p><blockquote><ul><li>分析很多数据</li><li>分析具体的业务</li><li>应用常见的算法</li><li>特征工程、调参、优化</li></ul></blockquote></blockquote></li><li><p>怎么做？</p><ol><li>入门</li><li>实战类书记</li><li>机器学习（西瓜书） - 周志华<br>统计学习方法 - 李航<br>深度学习（花书） </li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 了解机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建与优化</title>
      <link href="2021/01/14/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>2021/01/14/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="安装需要的软件"><a href="#安装需要的软件" class="headerlink" title="安装需要的软件"></a>安装需要的软件</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><blockquote><p>我们需要安装nodejs、git bash、npm、Hexo<br>其中我们只需要下载前两个就行了</p></blockquote><p><a href="https://nodejs.org/en/">Nodejs下载地址</a></p><p><a href="https://www.git-scm.com/download/win">Git下载地址</a></p><p><a href="https://www.cnblogs.com/ximiaomiao/p/7140456.html">Git安装参考</a></p><p><a href="https://www.xuanfengge.com/using-ssh-key-link-github-photo-tour.html">Git配置参考</a></p><p>最新版的Nodejs中包含了npm，所以我们不需要额外的安装了</p><p>下载完之后无脑点<code>下一步</code>就可以了,哈哈是不是很简单呢？</p><p>我们打开<code>Git Bash</code>输入下面命令来检测安装是否成功</p><p><code>node -v</code>和<code>npm -v</code>如果没有问题的话，应该是这样字的。</p><p><a href="https://imgchr.com/i/saRoQO"><img src="https://s3.ax1x.com/2021/01/14/saRoQO.png" alt="saRoQO.png"></a></p><blockquote><p>我们启动cmd，输入以下两条命令，成功后之后通过npm全局安装的包都会存放到node_global文件夹(这个文件夹是我自己创建的,你也可以创建在不同位置)下，后续查找包较方便。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\Program Files\nodejs\node_global&quot;</span><br><span class="line"></span><br><span class="line">npm config set cache &quot;D:\Program Files\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p><strong><em>这里的路径要记住，接下来可能我们在配置环境变量的时候，还将会用到</em></strong></p><blockquote><p>检测没问题之后，我们安装最后一个东西hexo<br>打开<code>Git Bash</code>输入<code>npm install -g hexo</code><br>安装完之后的显示信息如下所示:</p></blockquote><p><a href="https://imgchr.com/i/safuCt"><img src="https://s3.ax1x.com/2021/01/14/safuCt.png" alt="safuCt.png"></a></p><p>但是如果你会发现Hexo无法使用,我们还需要配置环境变量</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>这步，可能会比较的难，你需要跟着我做。</p><blockquote><p>我的电脑右击属性-&gt;点高级系统配置-&gt;点环境变量-&gt;在最上边一栏双击Path-&gt;点击新建-&gt;然后输入你node_global的路径</p></blockquote><p>步骤如图所示:<br><a href="https://imgchr.com/i/safyVJ"><img src="https://s3.ax1x.com/2021/01/14/safyVJ.png" alt="safyVJ.png"></a><a href="https://imgchr.com/i/safR8x"><img src="https://s3.ax1x.com/2021/01/14/safR8x.png" alt="safR8x.png"></a><a href="https://imgchr.com/i/saffxK"><img src="https://s3.ax1x.com/2021/01/14/saffxK.png" alt="saffxK.png"></a></p><h1 id="开始秒建博客"><a href="#开始秒建博客" class="headerlink" title="开始秒建博客"></a>开始秒建博客</h1><p>准备工作做了这么多了，现在我们终于要开始搭建自己的博客了,进入一个你博客存放的位置,然后在命令行中输入<code>hexo init</code>,这是博客的初始化操作,紧接着我们休息片刻喝口水.<br>现在初始化完毕了，我们首先看看我们的博客长什么样子吧!我们在命令行中输入<code>hexo s</code>(s是start的意思),然后我们打开浏览器输入网址<code>localhost:4000</code>我们就可以看到自己的博客了，博客如下图所示:<br><a href="https://imgchr.com/i/safLGt"><img src="https://s3.ax1x.com/2021/01/14/safLGt.png" alt="safLGt.png"></a><br>这时候大家可能会说，这是什么垃圾博客，白给我都不要，走了走了，算了算了。<br>大哥们，咱们先简单配置一下并说说Hexo的基本用法，然后就美化一下，相信我，最后不会很垃圾的.</p><h2 id="简单配置一下博客"><a href="#简单配置一下博客" class="headerlink" title="简单配置一下博客"></a>简单配置一下博客</h2><p>博客的配置文件是<code>你博客的根目录的_config.yml</code>文件<br>然后我们打开文件,进行基本的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: CharlesBlog        # 这里写博客的名字</span><br><span class="line">subtitle:     # 这里写博客的副标题</span><br><span class="line">description: &#39;&#39;         # 关于你博客的描述</span><br><span class="line">keywords:</span><br><span class="line">author: Charles            # 这里写博客的作者</span><br><span class="line">language: zh-CN         # 博客语言</span><br><span class="line">timezone: &#39;&#39;</span><br></pre></td></tr></table></figure><p>简单配置完毕，接来下我们学一下Hexo的基本命令</p><h3 id="Hexo基本命令"><a href="#Hexo基本命令" class="headerlink" title="Hexo基本命令"></a>Hexo基本命令</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>Hexo init</td><td>初始化博客</td></tr><tr><td>Hexo s</td><td>运行博客</td></tr><tr><td>Hexo n title</td><td>创建一篇新的文章，文章标题是title</td></tr><tr><td>Hexo c</td><td>清理文件</td></tr><tr><td>Hexo g</td><td>生成静态文件</td></tr><tr><td>Hexo d</td><td>程序部署博客（需要插件）</td></tr></tbody></table><h2 id="安装主题并简单配置"><a href="#安装主题并简单配置" class="headerlink" title="安装主题并简单配置"></a>安装主题并简单配置</h2><p><a href="https://butterfly.js.org/">butterfly主题</a></p><p><a href="https://hexo.io/themes/">Hexo官网主题</a></p><p>主题的预览图:<br><a href="https://imgchr.com/i/saoVh9"><img src="https://s3.ax1x.com/2021/01/14/saoVh9.md.png" alt="saoVh9.md.png"></a></p><blockquote><p>接下来执行<code>git clone https://github.com/jerryc127/hexo-theme-butterfly themes/butterfly</code>进行安装,这里我们先让他安装着，我们打开我们的配置文件找到这一行theme: landspace然后将landspace替换成我们的主题也就是butterfly</p></blockquote><blockquote><p>此时运行博客 是运行不了的，因为我们少了一个插件，我们通过命令<code>npm install hexo-renderer-pug hexo-renderer-stylus</code>来安装这个插件<br>最终完美运行.</p></blockquote><p><strong><em>为了以后升级方便，这里不推荐直接对主题的配置文件进行修改，而是复制配置文件进行修改。个人推荐把主題的配置文件<code>_config.yml</code>复制到 Hexo 的根目录下命名为<code>_config.butterfly.yml</code>，如果目录不存在那就创建一个。</em></strong></p><h3 id="配置主页大图片"><a href="#配置主页大图片" class="headerlink" title="配置主页大图片"></a>配置主页大图片</h3><p>安装完博客后我们看到的就是这个大图片<br><a href="https://imgchr.com/i/saIVQP"><img src="https://s3.ax1x.com/2021/01/14/saIVQP.md.png" alt="saIVQP.md.png"></a><br>你可能会说不好看，接下来我们进行更换这个图片，首先我们先找到一个自己想更换的图片,接下来我们将他放到图床当中去，本人经常用<a href="https://imgchr.com/">路过图床</a>,然后将我们的图片上传上去，这里会显示一个连接，我们先复制这个链接。<br><a href="https://imgchr.com/i/saot1I"><img src="https://s3.ax1x.com/2021/01/14/saot1I.md.png" alt="saot1I.md.png"></a></p><blockquote><p>然后找到我们的主题配置文件(路径应该是 博客根目录/_config.butterfly.yml),然后找到default_top_img:这一行将链接替换成你刚才复制的链接即可.</p></blockquote><p>说道这里我们顺便配置一下我们的头像，头像和首页图配置方法是一样的只要在配置文件中找到头像的位置将URL放入即可。</p><h3 id="配置主页的导航栏"><a href="#配置主页的导航栏" class="headerlink" title="配置主页的导航栏"></a>配置主页的导航栏</h3><p>我们可以看到我们的导航栏都是英文，我们可以自己手动修改。<a href="https://imgchr.com/i/saTuCj"><img src="https://s3.ax1x.com/2021/01/14/saTuCj.md.png" alt="saTuCj.md.png"></a></p><blockquote><p>我们打开我们的主题配置文档，路径在哪里我也就不用说了吧，在博客根目录/_config.butterfly.yml(最后一遍了)<br>配置文件开头就是我们的导航栏配置，默认配置如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  Home: &#x2F; || fa fa-home</span><br><span class="line">  Archives: &#x2F;archives&#x2F; || fa fa-archive</span><br><span class="line">  Tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class="line">  Categories: &#x2F;categories&#x2F; || fa fa-folder-open</span><br><span class="line">  Link: &#x2F;link&#x2F; || fa fa-link</span><br><span class="line">  About: &#x2F;about&#x2F; || fa fa-heart</span><br><span class="line">  List||fa fa-list:</span><br><span class="line">    - Music || &#x2F;music&#x2F; || fa fa-music</span><br><span class="line">    - Movie || &#x2F;movies&#x2F; || fa fa-film</span><br></pre></td></tr></table></figure><p>最终我修改完成后如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  首页: &#x2F; || fas fa-home</span><br><span class="line">  归档: &#x2F;archives&#x2F; || fas fa-archive</span><br><span class="line">  标签: &#x2F;tags&#x2F; || fas fa-tags</span><br><span class="line">  分类: &#x2F;categories&#x2F; || fas fa-folder-open</span><br><span class="line">  清单||fas fa-list:</span><br><span class="line">    - Music || &#x2F;music&#x2F; || fas fa-music</span><br><span class="line">    - Movie || &#x2F;movies&#x2F; || fas fa-video</span><br><span class="line">  友情链接: &#x2F;link&#x2F; || fas fa-link</span><br><span class="line">  关于: &#x2F;about&#x2F; || fas fa-heart</span><br></pre></td></tr></table></figure><p>  相信聪明的你，一看就懂了</p><h3 id="主页名人名言"><a href="#主页名人名言" class="headerlink" title="主页名人名言"></a>主页名人名言</h3><blockquote><p>我们在主题配置文件中搜索 <code>Never put off till tomorrow what you can do today</code>然后我们将这句话改成<code>我不知道将去何方 但我已在路上</code>最终实现了替换的效果，并且我们还可以去掉上边的一句话</p></blockquote><p>我们还可以自动获取网络上的好句子，我们只需要将<code>source: false</code>换成下面你想选择的样式</p><ul><li>source: 1 #调用博天API <a href="https://api.btstu.cn/">https://api.btstu.cn/</a></li><li>source: 2 #调用一言API <a href="https://hitokoto.cn/">https://hitokoto.cn/</a></li><li>source: 3 #调用一句话API <a href="http://yijuzhan.com/">http://yijuzhan.com/</a></li><li>source: 4 #调用今日詩詞API <a href="https://www.jinrishici.com/">https://www.jinrishici.com/</a></li></ul><p><strong><em>这里要注意的是: 在显示的时候，会先实现网络获取的一句话，然后在获取本地设置的话</em></strong></p><p><a href="https://butterfly.js.org/posts/21cfbf15/">更多butterfly美化在这哦</a></p><h1 id="部署云端"><a href="#部署云端" class="headerlink" title="部署云端"></a>部署云端</h1><p>现在我们的博客，感觉已经很漂亮了，接下来我们部署云端让所有人看到我们的博客吧!!!</p><p>最后！我们需要额外的一个工具来帮助我们推到仓库上，那就是！那就是！那就是 <code>hexo-deployer-git</code>搞它！</p><blockquote><p>执行下面的命令，进行安装插件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="使用GitHub部署云端"><a href="#使用GitHub部署云端" class="headerlink" title="使用GitHub部署云端"></a>使用GitHub部署云端</h2><blockquote><p>我们在Github中建立一个仓库，其中仓库名字必须是xxx.github.ioxxx是你的Github名字,过程如图所示</p></blockquote><p><a href="https://imgchr.com/i/sd96Cq"><img src="https://s3.ax1x.com/2021/01/14/sd96Cq.md.png" alt="sd96Cq.md.png"></a></p><blockquote><p>接下来，打开我们的<code>博客配置文件</code>,找到下面的内容</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;你的仓库地址&gt; # https:&#x2F;&#x2F;github.com&#x2F;TJ-XiaJiaHao&#x2F;TJ-XiaJiaHao.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><blockquote><p>然后写上你刚刚建立仓库的地址</p></blockquote><blockquote><p>执行下面的命令，进行远程部署到我们的Github的仓库<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  # 清理垃圾</span><br><span class="line">hexo clean</span><br><span class="line"># 推送到远端</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><br>浏览器访问：<a href="https://xxxxx.github.io/">https://xxxxx.github.io/</a> 即可看到效果。(把xxxx替换成的Github名字就可以了)例如我的是 <a href="https://ciks111.github.io/">https://ciks111.github.io/</a></p></blockquote><p><strong><em>不要着急，可能会有1-2分钟的延迟</em></strong></p><p>最终终于大工告成了  本文也就到此结束了.</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
